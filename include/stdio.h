/*
 * stdio.h
 *
 * A part of C17 standard, 7.21
 *
 * Input/output
 *
 */

# ifndef _STDIO_H
# define _STDIO_H 1

# ifndef __IGNORE_UNIMPLEMENTED_STDIO

# error Not implemented

# endif // __IGNORE_UNIMPLEMENTED_STDIO

# include <decl/size_t.h>
# include <decl/FILE.h>
# include <decl/fpos_t.h>
# include <decl/NULL.h>

# include <stdarg.h> /* For va_list */

/* Buffering modes used by setvbuf */
# define _IOFBF 0 /* Full-buffered mode */
# define _IOLBF 1 /* Line-buffered mode */
# define _IONBF 2 /* Non-buffered mode */

# define BUFSIZ 256 /* TODO */ /* Size of buffer used by setbuf */
# define EOF (-1) /* End-of-file indicator */

# define FOPEN_MAX 8 /* TODO */ /* Maximum number of open files */
# define FILENAME_MAX 0 /* TODO */ /* Longest possible filename */
# define L_tmpnam 8 /* TODO */ /* Longest possible temporary filename */

/* Seek directions used by fseek */
# define SEEK_SET 0 /* Seek from the beginning */
# define SEEK_CUR 1 /* Seek from current position in stream */
# define SEEK_END 2 /* Seek from the end */

# define TMP_MAX (64*64*64*64*64) /* TODO */ /* Maximum number of unique filenames generated by tmpnam */

/* Standard streams */
extern FILE* stdin;
extern FILE* stdout;
extern FILE* stderr;

/*
 * Operations on files, 7.21.4
 */

/*
 * Deletes file from the storage, 7.21.4.1
 */
// TODO: Not implemented!
int remove(const char* filename);

/*
 * Changes file name, 7.21.4.2
 */
// TODO: Not implemented!
int rename(const char* old_name, const char* new_name);

/*
 * Creates a temporary binary file, 7.21.4.3
 */
FILE* tmpfile(void);

/*
 * Generates temporary file name, 7.21.4.4
 */
char* tmpnam(char* s);

/*
 * File access functions, 7.21.5
 */

/*
 * Flush stream and close the file, 7.21.5.1
 */
// TODO: Not implemented!
int fclose(FILE* stream);

/*
 * Flush unwritten data into the stream, 7.21.5.2
 */
// TODO: Not implemented!
int fflush(FILE* stream);

/*
 * Opens the file and associates stream with it, 7.21.5.3
 */
// TODO: Not implemented!
FILE* fopen(const char* restrict filename, const char* restrict mode);

/*
 * Opens the file and associates stream pointed by last argument with it, 7.21.5.4
 */
// TODO: Not implemented!
FILE* freopen(const char* restrict filename, const char* restrict mode, FILE* restrict stream);

/*
 * Set buffer for file operations, 7.21.5.5
 */
void setbuf(FILE* restrict stream, char* restrict buf);

/*
 * Set buffer and mode for file operations, 7.21.5.6
 */
// TODO: Not implemented!
int setvbuf(FILE* restrict stream, char* restrict buf, int mode, size_t size);

/*
 * Formatted input/output functions, 7.21.6
 */

/*
 * Writes formatted output to the file, 7.21.6.1
 */
int fprintf(FILE* restrict stream, const char* restrict format, ...);

/*
 * Reads formatted input from the file, 7.21.6.2
 */
int fscanf(FILE* restrict stream, const char* restrict format, ...);

/*
 * Writes formatted output to the stdout, 7.21.6.3
 */
int printf(const char* restrict format, ...);

/*
 * Reads formatted input from the stdin, 7.21.6.4
 */
int scanf(const char* restrict format, ...);

/*
 * Writes n-1 bytes of formatted output to the buffer, 7.21.6.5
 */
int snprintf(char* restrict s, size_t n, const char* restrict format, ...);

/*
 * Writes formatted output to the buffer, 7.21.6.6
 */
int sprintf(char* restrict s, const char* restrict format, ...);

/*
 * Reads formatted input from the buffer, 7.21.6.7
 */
int sscanf(const char* restrict s, const char* restrict format, ...);

/*
 * Writes formatted output to the file with the variable argument list, 7.21.6.8
 */
// TODO: Not implemented!
int vfprintf(FILE* restrict stream, const char* restrict format, va_list args);

/*
 * Reads formatted input from the file with the variable argument list, 7.21.6.9
 */
// TODO: Not implemented!
int vfscanf(FILE* restrict stream, const char* restrict format, va_list args);

/*
 * Writes formatted output to the stdout with the variable argument list, 7.21.6.10
 */
int vprintf(const char* restrict format, va_list args);

/*
 * Reads formatted input form the stdin with the variable argument list, 7.21.6.11
 */
int vscanf(const char* restrict format, va_list args);

/*
 * Writes n-1 bytes of formatted output to the buffer with the variable argument list, 7.21.6.12
 */
// TODO: Not implemented!
int vsnprintf(char* restrict s, size_t n, const char* restrict format, va_list args);

/*
 * Writes formatted output to the buffer with the variable argument list, 7.21.6.13
 */
// TODO: Not implemented!
int vsprintf(char* restrict s, const char* restrict format, va_list args);

/*
 * Reads formatted input from the buffer with the variable argument list, 7.21.6.14
 */
// TODO: Not implemented!
int vsscanf(const char* restrict s, const char* restrict format, va_list args);

/*
 * Character input/output functions, 7.21.7
 */

/*
 * Reads the character from the stream, 7.21.7.1
 */
// TODO: Not implemented!
int fgetc(FILE* stream);

/*
 * Reads n-1 characters from the stream into the buffer, 7.21.7.2
 */
char* fgets(char* restrict s, int n, FILE* restrict stream);

/*
 * Writes the character to the stream, 7.21.7.3
 */
// TODO: Not implemented!
int fputc(int c, FILE* stream);

/*
 * Writes the string to the stream, 7.21.7.4
 */
int fputs(const char* restrict s, FILE* restrict stream);

/*
 * Reads the character from the stream, 7.21.7.5
 */
int getc(FILE* stream);

/*
 * Reads the character from the stdin, 7.21.7.6
 */
int getchar(void);

/*
 * Writes the character to the stream, 7.21.7.7
 */
int putc(int c, FILE* stream);

/*
 * Writes the character to the stdout, 7.21.7.8
 */
int putchar(int c);

/*
 * Writes the string with newline to the stdout, 7.21.7.9
 */
int puts(const char* s);

/*
 * Pushes the character back onto input stream, 7.21.7.10
 */
// TODO: Not implemented!
int ungetc(int c, FILE* stream);

/*
 * Direct input/output functions, 7.21.8
 */

/*
 * Reads into array nmemb elements of the specified size from the stream, 7.21.8.1
 */
size_t fread(void* restrict ptr, size_t size, size_t nmemb, FILE* restrict stream);

/*
 * Writes nmemb elements of the specified size from the array into the stream, 7.21.8.2
 */
size_t fwrite(const void* restrict ptr, size_t size, size_t nmemb, FILE* restrict stream);

/*
 * File positioning functions, 7.21.9
 */

/*
 * Retrieves parse state and file position indicator, 7.21.9.1
 */
// TODO: Not implemented!
int fgetpos(FILE* restrict stream, fpos_t* restrict pos);

/*
 * Sets the file position indicator, 7.21.9.2
 */
// TODO: Not implemented!
int fseek(FILE* stream, long int offet, int whence);

/*
 * Enforces parse state and file position indicator, 7.21.9.3
 */
// TODO: Not implemented!
int fsetpos(FILE* stream, const fpos_t* pos);

/*
 * Retrieves the file position indicator, 7.21.9.4
 */
// TODO: Not implemented!
long int ftell(FILE* stream);

/*
 * Sets file position indicator to the beginning of the file and clears error indicator, 7.21.9.5
 */
void rewind(FILE* stream);

/*
 * Error-handling functions, 7.21.10
 */

/*
 * Clears end-of-file and error indicators, 7.21.10.1
 */
// TODO: Not implemented!
void clearerr(FILE* stream);

/*
 * Tests the end-of-file indicator, 7.21.10.2
 */
// TODO: Not implemented!
int feof(FILE* stream);

/*
 * Tests the error indicator, 7.21.10.3
 */
// TODO: Not implemented!
int ferror(FILE* stream);

/*
 * Outputs message and error string, 7.21.10.4
 */
void perror(const char* s);

# endif // _STDIO_H
